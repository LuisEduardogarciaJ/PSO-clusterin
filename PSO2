#---------------------------------
#Clase particle
#---------------------------------
import numpy as np
from sklearn.cluster import KMeans

import matplotlib.pyplot as plt


class Particle:
    def __init__(self, n_clusters, data, use_kmeans=True, w=0.72, c1=1.49, c2=1.49):
        self.n_clusters = n_clusters
        if use_kmeans:
            k_means = KMeans(n_clusters=self.n_clusters)
            k_means.fit(data)
            self.centroids_pos = k_means.cluster_centers_
        else:
            self.centroids_pos = data[np.random.choice(list(range(len(data))), self.n_clusters)]

        #---------------------------------------------------------------------------------
        #Cada agrupamiento tiene un centoide que es el punto que lo representa
        #se asignan k datos aleatorios a k centroides
        #---------------------------------------------------------------------------------
        self.pb_val = np.inf
        #-----------------------------------------------------------------
        # Mejor posicion personal para todos los centroides hasta aqui
        #-----------------------------------------------------------------
        self.pb_pos = self.centroids_pos.copy()
        #--------------------------------------------------------------------------
        #Parametro del PSO(particle swarm optimization)
        #(optimizacion usando enjambres de particulas)
        #--------------------------------------------------------------------------
        self.velocity = np.zeros_like(self.centroids_pos)
        
        self.pb_clustering = None
        self.w = w
        self.c1 = c1
        self.c2 = c2

    def update_pb(self, data: np.ndarray):
        """
        Actualizacion el mejor puntaje basando en la funcion de aptitud(ecuacion 4)
        """
        # --------------------------------------------------------------------
        #Encuentra los datos (puntos) que permanecen a cada agrupamiento
        #utilizando distancias a los centroides
        #---------------------------------------------------------------------
        distances = self._get_distances(data=data)
        #---------------------------------------------------------------------------------------------
        #La distancia minima entre los datos y un centroide indica que permanece a ese agrupamiento
        #---------------------------------------------------------------------------------------------
        clusters = np.argmin(distances, axis=0)  
        clusters_ids = np.unique(clusters)
        while len(clusters_ids) != self.n_clusters:
            deleted_clusters = np.where(np.isin(np.arange(self.n_clusters), clusters_ids) == False)[0]
            self.centroids_pos[deleted_clusters] = data[np.random.choice(list(range(len(data))), len(deleted_clusters))]
            distances = self._get_distances(data=data)
            clusters = np.argmin(distances, axis=0)
            clusters_ids = np.unique(clusters)

        new_val = self._fitness_function(clusters=clusters, distances=distances)
        if new_val < self.pb_val:
            self.pb_val = new_val
            self.pb_pos = self.centroids_pos.copy()
            self.pb_clustering = clusters.copy()

    def update_velocity(self, gb_pos: np.ndarray):
        """
        Actualiza la nueva velocidad en función de la velocidad actual, la mejor posición personal hasta el momento y la mejor del enjambre (global)
         posición hasta ahora.
         :param gb_pos: vector de las mejores posiciones centroides entre todas las partículas hasta el momento
         :devolver:
        """
        self.velocity = self.w * self.velocity + \
                        self.c1 * np.random.random() * (self.pb_pos - self.centroids_pos) + \
                        self.c2 * np.random.random() * (gb_pos - self.centroids_pos)

    def move_centroids(self, gb_pos):
        self.update_velocity(gb_pos=gb_pos)
        new_pos = self.centroids_pos + self.velocity
        self.centroids_pos = new_pos.copy()

    def _get_distances(self, data: np.ndarray) -> np.ndarray:
        """
        Calcula la distancia euclidiana entre los datos y los centroides
         :datos de parámetro:
         :retorno: distancias: una serie de distancias numpy (len(centroides) x len(datos))
        """
        distances = []
        for centroid in self.centroids_pos:
            # calcula la distancia euclidiana --> raiz de la suma de los cuadrados
            d = np.linalg.norm(data - centroid, axis=1)
            distances.append(d)
        distances = np.array(distances)
        return distances

    def _fitness_function(self, clusters: np.ndarray, distances: np.ndarray) -> float:
        """
        Calcula la función de fitness (Ecuación 4)
         i es el índice de partícula
         j es el índice de agrupaciones en la partícula i
         p es el vector de los índices de datos de entrada que pertenecen al grupo [ij]
         z[p] es el vector de los datos de entrada pertenecientes al clúster[ij]
         d es un vector de distancias entre z(p) y el centroide j
         :param clústeres:
         :param distancias:
         :regresar: J:"""
        J = 0.0
        for i in range(self.n_clusters):
            p = np.where(clusters == i)[0]
            if len(p):
                d = sum(distances[i][p])
                d /= len(p)
                J += d
        J /= self.n_clusters
        return J
